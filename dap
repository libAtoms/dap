#!/usr/bin/env python

from __future__ import print_function

import ase.io, vtk, sys, os, re
from davtk.settings import DavTKSettings
from davtk.parse import parse_file
from davtk.state import *
from davtk.interactors import *
import argparse

cli_parse = argparse.ArgumentParser()
cli_parse.add_argument("--geometry","-g",type=str,default="1000x1000")
cli_parse.add_argument("--execute_commands","-e",action='append',type=str, help="commands to execute (';' separated)", default=[])
cli_parse.add_argument("--format","-f",type=str, nargs='+', help="formats for each atoms file", default = None)
cli_parse.add_argument("atoms_files",nargs="+",type=str,help="atoms files in any ase.io.read format, optionally including '@START:END:STEP' interval")
args = cli_parse.parse_args()

# read atoms from atoms_files
if args.format is None:
    args.format = [ None ] * len(args.atoms_files)
else:
    if len(args.format) != len(args.atoms_files):
        raise ValueError("Got {} formats, but different number of atoms files {}".format(len(args.format), len(args.atoms_files)))
at_list = []
for (filename, fmt) in zip(args.atoms_files, args.format):
    if "@" in filename:
        r = None
    else:
        r = ":"
    for at in ase.io.read(filename, r, format=fmt):
        at.info["_vtk_filename"] = filename
        at_list.append(at)

# read settings from home dir and current dir
settings = DavTKSettings()
try:
    parse_file(os.path.join(os.environ["HOME"],".daprc"), settings=settings)
except IOError:
    pass
try:
    parse_file(".daprc", settings=settings)
except IOError:
    pass

# A renderer and render window
renderer = vtk.vtkRenderer()
renderer.SetBackground(settings["background_color"])
renwin = vtk.vtkRenderWindow()
m = re.search("^(\d+)x(\d+)$", args.geometry)
if not m:
    raise ValueError("-geometry '{}' not NxM".format(args.geometry))
renwin.SetSize(int(m.group(1)), int(m.group(2)))
renwin.AddRenderer(renderer)

# An interactor for mouse stuff
interactor = vtk.vtkRenderWindowInteractor()
interactor.SetRenderWindow(renwin)

davtk_state = DaVTKState(at_list, settings, renderer, interactor)

# add the custom styles for regular interaction and area selection
sel_style = RubberbandSelect(davtk_state,parent=interactor)
sel_style.SetDefaultRenderer(renderer)

def_style = MouseInteractorHighLightActor(settings,davtk_state,sel_style,parent=interactor)
def_style.SetDefaultRenderer(renderer)
def_style.UseTimersOn()
interactor.CreateRepeatingTimer(100)

interactor.SetInteractorStyle(def_style)

# set up camera
(min_pos, max_pos) = find_min_max(at_list)
camera = renderer.GetActiveCamera()
camera.ParallelProjectionOn()
camera.SetParallelScale(np.max(max_pos-min_pos))
extent = max(max_pos) - min(min_pos)
camera.SetPosition([(max_pos[0]+min_pos[0])/2.0, (max_pos[1]+min_pos[1])/2.0, 1000.0+extent/2.0])
camera.SetFocalPoint((max_pos+min_pos)/2.0)
camera.SetClippingRange(1000-extent/2.0, 1000+3*extent/2.0)

# start viewing first frame
davtk_state.update()
davtk_state.startup()

# now that atoms are read in and davtk_state exists, read any other commands (e.g. extra settings)
for l in args.execute_commands:
    for sub_l in l.split(";"):
        parse_line(sub_l, settings=settings, state=davtk_state)

print("""DAP

Use 'usage' for general usage info, and 'command -h' for detailed help on each command.
Type 'h' in GUI window for GUI help message
""")
# Start
print("> "); sys.stdout.flush()
interactor.Initialize()
interactor.Start()
